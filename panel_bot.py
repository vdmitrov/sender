from telebot import TeleBot, types
import json
import os
import logging

CONFIG_FILE = "config.json"
CHATS_FILE = "chats.json"
LOG_FILE = "bot.log"
FORWARD_FILE = "forward.json"
IMAGES_DIR = "images"
os.makedirs(IMAGES_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=LOG_FILE,
    filemode='a',
    format='%(asctime)s %(levelname)s: %(message)s',
    level=logging.INFO,
    encoding='utf-8'
)

if not os.path.exists(CONFIG_FILE):
    raise FileNotFoundError(f"–ù–µ—Ç —Ñ–∞–π–ª–∞ {CONFIG_FILE}")

with open(CONFIG_FILE, "r", encoding="utf-8") as f:
    config = json.load(f)

BOT_TOKEN = config["BOT_TOKEN"]
bot = TeleBot(BOT_TOKEN)

def load_chats():
    try:
        with open(CHATS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}")
        return {}

def save_chats(data):
    try:
        with open(CHATS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logging.info(f"–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω: {list(data.keys())}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")

@bot.message_handler(commands=['start'])
def start(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
    kb.add("üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç")
    bot.send_message(message.chat.id, "üì¢ –ü–∞–Ω–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=kb)
    logging.info(f"/start –æ—Ç {message.from_user.id} ({message.from_user.username})")

@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
def list_chats(message):
    chats = load_chats()
    if not chats:
        bot.send_message(message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        logging.info(f"–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω {message.from_user.id}, –Ω–æ –æ–Ω –ø—É—Å—Ç")
        return
    text = "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:\n"
    for url, delay in chats.items():
        text += f"{url} ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞ {delay} —Å–µ–∫.\n"
    bot.send_message(message.chat.id, text)
    logging.info(f"–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {message.from_user.id}")

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç")
def add_chat_prompt(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n—Å—Å—ã–ª–∫–∞_–Ω–∞_—á–∞—Ç –∑–∞–¥–µ—Ä–∂–∫–∞_–≤_—Å–µ–∫")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞")

@bot.message_handler(func=lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç")
def remove_chat_prompt(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞")

@bot.message_handler(content_types=['text'])
def process_text(message):
    parts = message.text.split()
    if len(parts) == 2 and parts[0].startswith("http"):
        url, delay = parts
        try:
            delay = int(delay)
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É: {delay}")
            return
        chats = load_chats()
        chats[url] = delay
        save_chats(chats)
        bot.send_message(message.chat.id, f"‚úÖ –ß–∞—Ç {url} –¥–æ–±–∞–≤–ª–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay} —Å–µ–∫.")
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç {url} —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay} —Å–µ–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    elif message.text.startswith("http"):
        url = message.text.strip()
        chats = load_chats()
        if url in chats:
            del chats[url]
            save_chats(chats)
            bot.send_message(message.chat.id, f"üóë –ß–∞—Ç {url} —É–¥–∞–ª—ë–Ω")
            logging.info(f"–£–¥–∞–ª—ë–Ω —á–∞—Ç {url} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        else:
            bot.send_message(message.chat.id, "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç {url}")

# ---- –ù–æ–≤–æ–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ----
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    file_path = os.path.join(IMAGES_DIR, "logo.jpg")
    with open(file_path, "wb") as f:
        f.write(downloaded_file)

    # –û–±–Ω–æ–≤–ª—è–µ–º forward.json
    forward_data = {
        "use_text": True,
        "use_custom": True,
        "use_forward": False,
        "forward_data": {},
        "enabled": True,
        "photo_data": {
            "type": "photo",
            "file": file_path,
            "caption": message.caption if message.caption else ""
        }
    }

    with open(FORWARD_FILE, "w", encoding="utf-8") as f:
        json.dump(forward_data, f, ensure_ascii=False, indent=2)

    bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    logging.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {file_path} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

bot.polling(none_stop=True)
